// <auto-generated />
using FightCore.FrameData;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FightCore.Data.Migrations
{
    [DbContext(typeof(FrameDataContext))]
    [Migration("20250728193513_Postgress_Init")]
    partial class Postgress_Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.7")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FightCore.Models.AlternativeAnimation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<string>("GifUrl")
                        .HasColumnType("text");

                    b.Property<long>("MoveId")
                        .HasColumnType("bigint");

                    b.Property<string>("PngUrl")
                        .HasColumnType("text");

                    b.Property<string>("WebmUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("AlternativeAnimations");
                });

            modelBuilder.Entity("FightCore.Models.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long?>("CharacterInfoId")
                        .HasColumnType("bigint");

                    b.Property<long?>("CharacterStatisticsId")
                        .HasColumnType("bigint");

                    b.Property<long>("FightCoreId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterInfoId");

                    b.HasIndex("CharacterStatisticsId");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("FightCore.Models.CharacterMiscInfo", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Discord")
                        .HasColumnType("text");

                    b.Property<string>("MeleeFrameData")
                        .HasColumnType("text");

                    b.Property<string>("SsbWiki")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("CharactersMiscInfos");
                });

            modelBuilder.Entity("FightCore.Models.CharacterStatistics", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<bool>("CanWallJump")
                        .HasColumnType("boolean");

                    b.Property<int>("DashFrames")
                        .HasColumnType("integer");

                    b.Property<double>("Gravity")
                        .HasColumnType("double precision");

                    b.Property<double>("InitialDash")
                        .HasColumnType("double precision");

                    b.Property<int>("JumpSquat")
                        .HasColumnType("integer");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("PLAIntangibilityFrames")
                        .HasColumnType("integer");

                    b.Property<double>("RunSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("WalkSpeed")
                        .HasColumnType("double precision");

                    b.Property<double>("WaveDashLength")
                        .HasColumnType("double precision");

                    b.Property<int>("WaveDashLengthRank")
                        .HasColumnType("integer");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.ToTable("CharacterStatistics");
                });

            modelBuilder.Entity("FightCore.Models.Hit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("End")
                        .HasColumnType("integer");

                    b.Property<long>("MoveId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Start")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.ToTable("Hits");
                });

            modelBuilder.Entity("FightCore.Models.Hitbox", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("Angle")
                        .HasColumnType("bigint");

                    b.Property<long>("BaseKnockback")
                        .HasColumnType("bigint");

                    b.Property<long>("Damage")
                        .HasColumnType("bigint");

                    b.Property<string>("Effect")
                        .HasColumnType("text");

                    b.Property<long?>("HitId")
                        .HasColumnType("bigint");

                    b.Property<int>("HitlagAttacker")
                        .HasColumnType("integer");

                    b.Property<int>("HitlagAttackerCrouched")
                        .HasColumnType("integer");

                    b.Property<int>("HitlagDefender")
                        .HasColumnType("integer");

                    b.Property<int>("HitlagDefenderCrouched")
                        .HasColumnType("integer");

                    b.Property<bool>("IsWeightIndependent")
                        .HasColumnType("boolean");

                    b.Property<long>("KnockbackGrowth")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<long>("SetKnockback")
                        .HasColumnType("bigint");

                    b.Property<int>("Shieldstun")
                        .HasColumnType("integer");

                    b.Property<int?>("YoshiArmorBreakPercentage")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("HitId");

                    b.ToTable("Hitboxes");
                });

            modelBuilder.Entity("FightCore.Models.Move", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int?>("AutoCancelAfter")
                        .HasColumnType("integer");

                    b.Property<int?>("AutoCancelBefore")
                        .HasColumnType("integer");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int?>("End")
                        .HasColumnType("integer");

                    b.Property<string>("GifUrl")
                        .HasColumnType("text");

                    b.Property<int?>("IASA")
                        .HasColumnType("integer");

                    b.Property<bool>("IsInterpolated")
                        .HasColumnType("boolean");

                    b.Property<int?>("LCanceledLandLag")
                        .HasColumnType("integer");

                    b.Property<int?>("LandLag")
                        .HasColumnType("integer");

                    b.Property<int?>("LandingFallSpecialLag")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("NormalizedName")
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int?>("Percent")
                        .HasColumnType("integer");

                    b.Property<string>("PngUrl")
                        .HasColumnType("text");

                    b.Property<string>("Source")
                        .HasColumnType("text");

                    b.Property<int?>("Start")
                        .HasColumnType("integer");

                    b.Property<int>("TotalFrames")
                        .HasColumnType("integer");

                    b.Property<int>("Type")
                        .HasColumnType("integer");

                    b.Property<string>("WebmUrl")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Moves");
                });

            modelBuilder.Entity("FightCore.Models.Source", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Url")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Sources");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.ScriptCommand", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<string>("DisplayName")
                        .HasColumnType("text");

                    b.Property<string>("HexString")
                        .HasColumnType("text");

                    b.Property<long>("Length")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<long?>("SubactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("Type")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubactionId");

                    b.ToTable("ScriptCommands");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.MoveSubaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<int>("Frame")
                        .HasColumnType("integer");

                    b.Property<int>("MatchType")
                        .HasColumnType("integer");

                    b.Property<long>("MoveId")
                        .HasColumnType("bigint");

                    b.Property<long>("SubactionId")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("MoveId");

                    b.HasIndex("SubactionId");

                    b.ToTable("MoveSubactions");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Subaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint");

                    b.Property<int>("Index")
                        .HasColumnType("integer");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.ToTable("Subactions");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.SubactionHeader", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<long>("Id"));

                    b.Property<long>("ScriptOffset")
                        .HasColumnType("bigint");

                    b.Property<long>("StringOffset")
                        .HasColumnType("bigint");

                    b.Property<long>("SubactionId")
                        .HasColumnType("bigint");

                    b.Property<long>("Unknown1Offset")
                        .HasColumnType("bigint");

                    b.Property<long>("Unknown2Offset")
                        .HasColumnType("bigint");

                    b.Property<long>("Unknown3Flags")
                        .HasColumnType("bigint");

                    b.Property<long>("Unknown4Offset")
                        .HasColumnType("bigint");

                    b.HasKey("Id");

                    b.HasIndex("SubactionId")
                        .IsUnique();

                    b.ToTable("SubactionHeader");
                });

            modelBuilder.Entity("MoveSource", b =>
                {
                    b.Property<long>("MovesId")
                        .HasColumnType("bigint");

                    b.Property<long>("SourcesId")
                        .HasColumnType("bigint");

                    b.HasKey("MovesId", "SourcesId");

                    b.HasIndex("SourcesId");

                    b.ToTable("MoveSource");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.AutoCancelCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<bool>("AutoCancelEnabled")
                        .HasColumnType("boolean");

                    b.ToTable("AutoCancelCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.BodyStateCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("BodyType")
                        .HasColumnType("integer");

                    b.ToTable("BodyStateCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.HitboxCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("Angle")
                        .HasColumnType("integer");

                    b.Property<int>("BaseKnockback")
                        .HasColumnType("integer");

                    b.Property<int>("BoneId")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<int>("Element")
                        .HasColumnType("integer");

                    b.Property<int>("HitboxId")
                        .HasColumnType("integer");

                    b.Property<bool>("HitsAir")
                        .HasColumnType("boolean");

                    b.Property<bool>("HitsGround")
                        .HasColumnType("boolean");

                    b.Property<int>("HurtboxInteraction")
                        .HasColumnType("integer");

                    b.Property<int>("KnockbackGrowth")
                        .HasColumnType("integer");

                    b.Property<int>("SFX")
                        .HasColumnType("integer");

                    b.Property<int>("ShieldDamage")
                        .HasColumnType("integer");

                    b.Property<int>("Size")
                        .HasColumnType("integer");

                    b.Property<int>("Unknown0")
                        .HasColumnType("integer");

                    b.Property<int>("UnknownQ")
                        .HasColumnType("integer");

                    b.Property<int>("UnknownR")
                        .HasColumnType("integer");

                    b.Property<int>("UnknownV")
                        .HasColumnType("integer");

                    b.Property<int>("WeightDependantKnockback")
                        .HasColumnType("integer");

                    b.Property<int>("XOffset")
                        .HasColumnType("integer");

                    b.Property<int>("YOffset")
                        .HasColumnType("integer");

                    b.Property<int>("ZOffset")
                        .HasColumnType("integer");

                    b.ToTable("HitboxCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.PartialBodystateCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("Bone")
                        .HasColumnType("integer");

                    b.ToTable("PartialBodystateCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.PointerCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<long>("Pointer")
                        .HasColumnType("bigint");

                    b.ToTable("PointerCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.StartLoopCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("Iterations")
                        .HasColumnType("integer");

                    b.ToTable("StartLoopCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.ThrowCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("Angle")
                        .HasColumnType("integer");

                    b.Property<int>("BaseKnockback")
                        .HasColumnType("integer");

                    b.Property<int>("Damage")
                        .HasColumnType("integer");

                    b.Property<int>("KnockbackGrowth")
                        .HasColumnType("integer");

                    b.Property<int>("ThrowElement")
                        .HasColumnType("integer");

                    b.Property<int>("ThrowType")
                        .HasColumnType("integer");

                    b.Property<int>("WeightDependantKnockback")
                        .HasColumnType("integer");

                    b.ToTable("ThrowCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.TimerCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("Frames")
                        .HasColumnType("integer");

                    b.ToTable("TimerCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.UnsolvedCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.ToTable("UnsolvedCommands");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.VisibilityCommand", b =>
                {
                    b.HasBaseType("FightCore.Models.Subactions.Commands.ScriptCommand");

                    b.Property<int>("Visibility")
                        .HasColumnType("integer");

                    b.ToTable("VisibilityCommands");
                });

            modelBuilder.Entity("FightCore.Models.AlternativeAnimation", b =>
                {
                    b.HasOne("FightCore.Models.Move", "Move")
                        .WithMany("AlternativeAnimations")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");
                });

            modelBuilder.Entity("FightCore.Models.Character", b =>
                {
                    b.HasOne("FightCore.Models.CharacterMiscInfo", "CharacterInfo")
                        .WithMany()
                        .HasForeignKey("CharacterInfoId");

                    b.HasOne("FightCore.Models.CharacterStatistics", "CharacterStatistics")
                        .WithMany()
                        .HasForeignKey("CharacterStatisticsId");

                    b.Navigation("CharacterInfo");

                    b.Navigation("CharacterStatistics");
                });

            modelBuilder.Entity("FightCore.Models.Hit", b =>
                {
                    b.HasOne("FightCore.Models.Move", null)
                        .WithMany("Hits")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Hitbox", b =>
                {
                    b.HasOne("FightCore.Models.Hit", null)
                        .WithMany("Hitboxes")
                        .HasForeignKey("HitId");
                });

            modelBuilder.Entity("FightCore.Models.Move", b =>
                {
                    b.HasOne("FightCore.Models.Character", "Character")
                        .WithMany("Moves")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.ScriptCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Subaction", null)
                        .WithMany("Commands")
                        .HasForeignKey("SubactionId");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.MoveSubaction", b =>
                {
                    b.HasOne("FightCore.Models.Move", "Move")
                        .WithMany("MoveSubactions")
                        .HasForeignKey("MoveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FightCore.Models.Subactions.Subaction", "Subaction")
                        .WithMany("MoveSubactions")
                        .HasForeignKey("SubactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Move");

                    b.Navigation("Subaction");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Subaction", b =>
                {
                    b.HasOne("FightCore.Models.Character", "Character")
                        .WithMany("Subactions")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Character");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.SubactionHeader", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Subaction", "Subaction")
                        .WithOne("Header")
                        .HasForeignKey("FightCore.Models.Subactions.SubactionHeader", "SubactionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Subaction");
                });

            modelBuilder.Entity("MoveSource", b =>
                {
                    b.HasOne("FightCore.Models.Move", null)
                        .WithMany()
                        .HasForeignKey("MovesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FightCore.Models.Source", null)
                        .WithMany()
                        .HasForeignKey("SourcesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.AutoCancelCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.AutoCancelCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.BodyStateCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.BodyStateCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.HitboxCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.HitboxCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.PartialBodystateCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.PartialBodystateCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.PointerCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.PointerCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.StartLoopCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.StartLoopCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.ThrowCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.ThrowCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.TimerCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.TimerCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.UnsolvedCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.UnsolvedCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Commands.VisibilityCommand", b =>
                {
                    b.HasOne("FightCore.Models.Subactions.Commands.ScriptCommand", null)
                        .WithOne()
                        .HasForeignKey("FightCore.Models.Subactions.Commands.VisibilityCommand", "Id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FightCore.Models.Character", b =>
                {
                    b.Navigation("Moves");

                    b.Navigation("Subactions");
                });

            modelBuilder.Entity("FightCore.Models.Hit", b =>
                {
                    b.Navigation("Hitboxes");
                });

            modelBuilder.Entity("FightCore.Models.Move", b =>
                {
                    b.Navigation("AlternativeAnimations");

                    b.Navigation("Hits");

                    b.Navigation("MoveSubactions");
                });

            modelBuilder.Entity("FightCore.Models.Subactions.Subaction", b =>
                {
                    b.Navigation("Commands");

                    b.Navigation("Header");

                    b.Navigation("MoveSubactions");
                });
#pragma warning restore 612, 618
        }
    }
}
